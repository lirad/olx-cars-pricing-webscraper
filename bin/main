#!/usr/bin/env ruby
require_relative('../lib/players.rb')
require_relative('../lib/game.rb')

def validate_name?(name, prev_player = nil)
  error_msg = 'invalid name, player name must be unique and between 3-20 letters'
  if prev_player.nil?
    if !name.empty? && name.length.between?(3, 20)
      true
    else
      puts error_msg
      false
    end
  elsif prev_player == 'player1'
    if !name.empty? && name.length.between?(3, 20) && name.capitalize != $player1_name
      true
    else
      puts error_msg
      false
    end
  end
end

def player_name(player_name)
  p "Hey #{player_name}, whats your name?"
  name = gets.chomp
  if player_name == 'player1'
    validate_name?(name) ? name : player_name(player_name)
  elsif player_name == 'player2'
    validate_name?(name, 'player1') ? name : player_name(player_name)
  end
end

def player_token(player_name)
  p "Hello #{player_name}, Please select a token X or O"
  token = gets.chomp
  if Players.validate_token?(token)
    p "#{token.capitalize}, Nice choice!"
    token.capitalize
  else
    p 'Invalid token, please choose X or O'
    player_token(player_name)
  end
end

$player1_name = player_name('player1').capitalize
player1_token = player_token($player1_name)
player1 = Players.new($player1_name, player1_token)

player2_name = player_name('player2').capitalize
player2_token = %w[x X].include?(player1_token) ? 'O' : 'X'
puts "hey #{player2_name}, your token is #{player2_token.capitalize}."
player2 = Players.new(player2_name, player2_token)

players = [{ name: player1.name, token: player1_token }, { name: player2.name, token: player2_token }]

game = Game.new(players)

while game.game_over == false
  current_player_turn = game.players[game.current_player][:name]
  puts "#{current_player_turn} Please select a number from the board:"
  game.board_display.each { |n| p n }
  select_number = gets.chomp.to_i
  next unless game.position_validation?(select_number)

  game.change_board(select_number)
  game.board_display.each { |n| p n }
  def iterate(player, select_number, game)
    player.player_moves << select_number
    if game.game_over_conditions(player.player_moves) == 'win'
      puts "#{player.name} wins!!!!!"
      game.game_over = true
    elsif game.game_over_conditions(player.player_moves) == 'draw'
      puts "it's a draw!!"
      game.game_over = true
    end
  end
  current_player_turn == player1.name ? iterate(player1, select_number, game) : iterate(player2, select_number, game)
end
